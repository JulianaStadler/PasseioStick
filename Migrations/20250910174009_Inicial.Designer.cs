// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasseioStick.Models;

#nullable disable

namespace PasseioStick.Migrations
{
    [DbContext(typeof(PasseioStickDbContext))]
    [Migration("20250910174009_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PasseioStick.Models.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("PasseioStick.Models.Tour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CratedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CratedByUserId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("PasseioStick.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameComplete")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PointTour", b =>
                {
                    b.Property<Guid>("PointsOfTourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToursImOnId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PointsOfTourId", "ToursImOnId");

                    b.HasIndex("ToursImOnId");

                    b.ToTable("TourPoint", (string)null);
                });

            modelBuilder.Entity("TourUser", b =>
                {
                    b.Property<Guid>("ToursThatIMadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersWhoMadeMeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ToursThatIMadeId", "UsersWhoMadeMeId");

                    b.HasIndex("UsersWhoMadeMeId");

                    b.ToTable("UserMadeTour", (string)null);
                });

            modelBuilder.Entity("TourUser1", b =>
                {
                    b.Property<Guid>("ToursThatINeedMakeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersWhoNeedMakeMeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ToursThatINeedMakeId", "UsersWhoNeedMakeMeId");

                    b.HasIndex("UsersWhoNeedMakeMeId");

                    b.ToTable("UserNeedMakeTour", (string)null);
                });

            modelBuilder.Entity("PasseioStick.Models.Tour", b =>
                {
                    b.HasOne("PasseioStick.Models.User", "CratedByUser")
                        .WithMany("ToursThatICreated")
                        .HasForeignKey("CratedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CratedByUser");
                });

            modelBuilder.Entity("PointTour", b =>
                {
                    b.HasOne("PasseioStick.Models.Point", null)
                        .WithMany()
                        .HasForeignKey("PointsOfTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasseioStick.Models.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursImOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourUser", b =>
                {
                    b.HasOne("PasseioStick.Models.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursThatIMadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasseioStick.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoMadeMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourUser1", b =>
                {
                    b.HasOne("PasseioStick.Models.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursThatINeedMakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasseioStick.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoNeedMakeMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasseioStick.Models.User", b =>
                {
                    b.Navigation("ToursThatICreated");
                });
#pragma warning restore 612, 618
        }
    }
}
